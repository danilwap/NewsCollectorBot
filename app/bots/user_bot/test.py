from config import api_id, api_hash, phone, target_forum_id

from telethon import TelegramClient, events
from telethon.tl.functions.channels import GetForumTopicsRequest, CreateForumTopicRequest
import asyncio
from logging_config import logger
from services.db import get_active_channels

from telethon.tl.types import Channel, Chat

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ===
client = TelegramClient(phone, api_id, api_hash)


async def get_forum_topic(input_channel, title):
    try:
        list_topics = await client(GetForumTopicsRequest(
            channel=input_channel,
            offset_date=None,
            offset_id=0,
            offset_topic=0,
            limit=100
        ))
        for topic in list_topics.topics:
            if topic.title == title:
                logger.info(f"[üîÅ] –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–ø–∏–∫ '{title}'")
                return topic
        return
    except Exception as e:
        logger.error(f'[‚ùó] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–ø–∏–∫–æ–≤: {e}')
        raise


async def get_or_create_topic_entity(title):
    try:
        input_channel = await client.get_input_entity(target_forum_id)  # –ü–æ–ª—É—á–∞–µ–º InputChannel –≥—Ä—É–ø–ø—ã

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–ø–∏–∫–æ–≤ (–¥–æ 100)
        topic = await get_forum_topic(input_channel, title)
        if topic:
            return topic

        # # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º
        await client(CreateForumTopicRequest(channel=input_channel, title=title))
        topic = await get_forum_topic(input_channel, title)
        logger.info(f"[üÜï] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–æ–ø–∏–∫ '{title}' {topic.id}")
        return topic

    except Exception as e:
        logger.error(f"[‚ùó] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/—Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ '{title}': {e}")
        raise


async def forward_to_forum(message, title):
    try:
        input_topic = await get_or_create_topic_entity(title)

        await client.send_message(
            entity=target_forum_id,
            message=message,
            comment_to=input_topic.id
        )

        logger.info(f"[‚û°] –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ —Ç–æ–ø–∏–∫ '{title}'")

    except Exception as e:
        logger.error(f"[‚ùó] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤ —Ç–æ–ø–∏–∫ '{title}': {e}")


async def get_all_topic(client: TelegramClient):
    input_channel = await client.get_input_entity(target_forum_id)

    result = await client(GetForumTopicsRequest(
        channel=input_channel,
        offset_date=None,
        offset_id=0,
        offset_topic=0,
        limit=100
    ))

    for topic in result.topics:
        print(f"üü¢ –¢–µ–º–∞: {topic.title} | ID: {topic.id}")
        if topic.id == 1:
            await client.send_message(
                entity=input_channel,  # üëà –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ —Ç–æ–ø–∏–∫
                message="–ü—Ä–∏–≤–µ—Ç –∏–∑ –Ω—É–∂–Ω–æ–π —Ç–µ–º—ã",
                comment_to=7
            )


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===  –≤ —Ä–∞–±–æ—Ç–µ
@client.on(events.NewMessage())
async def watch_sources(event):
    try:
        active_channels = [i['chat_id'] for i in get_active_channels()]  # –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ API
        if not active_channels:
            return
        entity = await event.get_chat()
        title = getattr(entity, "title", None)

        str_chat_id = str(event.chat_id)
        if isinstance(entity, (Channel, Chat)):
            if str_chat_id in active_channels:
                logger.info(f'[‚úÖ] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {title}, ID: {str_chat_id}')
                await forward_to_forum(event.message, title)

    except Exception as e:
        logger.error(f"[‚ùó] –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")


# === –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ ===
async def main():
    await client.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ –∫–∞–Ω–∞–ª–∞–º–∏...")
    await client.run_until_disconnected()


asyncio.run(main())
